#+Title: Qute

* Using Qute 

** Simplest thing to do:  Beget objects

   This is from Crockfords definition of beget.[fn:1]  Beget will create a new object using the old object as its prototype.

#begin_src js :tangle no
var newObj = Qute.beget();
var newerObj = newObj.beget();
#+end_src

   ~newObj~ has the ~Qute~ object as its prototype, and ~newerObj~ has ~newObj~ and therefore ~Qute~ as it's prototype. 

** Extending objects with Extend

   In most cases you'll want to extend an object in the process of creating it.  This is done with the extend method:

#+begin_src js :tangle no
  var lawOfFives = Qute.extend({
      num: 5,
      why: "2 + 3 is 5.  It's the law of 5s!",
      printAwesomeNumber: function() {
          console.log (num+" is AWESOME.  Why?"+why);
      }
  });
  
  var skidoo = lawOfFives.extend({
      num: 6,
      why: "2 * 3 is 6." 
  });
    
  var powadoo = lawOfFives.extend({
      num: 8,
      why: "2 ^ 3 is 8." 
  });
#+end_src

   You can also pass multiple objects to extend.  Properties take precidence according to argument order, so for example:

#+begin_src js tangle: no
  
  var A = Qute.extend({
      a: 5,
      b: 6,
      c: 8
  });
  
  
  var B = A.extend({ a: 8}, { a: 7, z: 8}, {a: 9, w: 23, z: 88});
  
  console.log(B);
  /* -->
     {
       a: 8,
       b: 6,
       c: 8,
       w: 23
       z: 8
     }
  ,*/
#+end_src

** Rebinding -- or, how to avoid eating shit sandwiches.

   Sometimes you just have to eat shit... err.. use a Javascript
   library that binds this willy-nilly.  That sucks.  ~rebind~ lets
   you make sure that "this" says true to the current object, so you
   don't have to worry about errant event handlers.

#+begin_src js :tangle no
  var SomeHandlerObj = Qute.extend({
      init: function() {
          $poop('someDomSelector').on('click',this.rebind(this.click));
          $poop('someDomSelector').on('mouseEnter', this.rebind("enter"));
      },  
      click: function(e) {
          this.doStuff(e.target);
      },
      enter: function(e) {
          this.doStuff("STUFF!");
      }
      doStuff: function(things) {
          // ... etc ...
      }
  });
#+end_src

   The first syntax shows using rebind by passing in an arbitrary
   function.  A new function will be returned that will do stuff with
   the target...sorry...that willexecute the "click" function defined
   int he SomeHandlerObj with ~this~ bound to the SomeHandlerObj.  If
   you tried to define your handler without the rebind, the call
   ~this.doStufff~ would likely fail, as the $poop library likes to
   rebind ~this~.

   You can pass in any function that you want to rebind.  This would
   allow you to borrow methods from other functions, and makes for
   some interesting programming techniques. Try not to get too
   interesting however.

   Note, there already is a function in ECMA script that does what
   ~rebind~ does--unsurprisingly called ~bind~.  ~rebind~ is provided
   for compatibility.



* Qon2Dom (Quasi-Useful) Usage Example

** TODO add support for a single dom linked item, or a full component of many dom links

** Status: Working, but needs more work.
#+begin_src js :tangle qon2dom.js
  Qon2Dom = Qute.extend({
      children: [],
      domReady:  function() {
          for(i=0; i< this.children.length; i++) {
              if (typeof this.children[i]["init"] == "function") {
                  this.children[i].init();
              } else {
                  throw "Cannot call init";
              }
          }
      },
      beget: function() {
          var o = Qute.beget(this);
          Qon2Dom.children.push(o);
          return o;
      },
      init: function() {}
  });

#+end_src

** TODO if no jquery is available, then attach an event the old school way.
Note, this is kinda poopy because if Qon2Dom is loaded before jQuery, it won't trigger init.

#+begin_src js :tangle qon2dom.js
  if (typeOf jQuery === "function") {
      jQuery(function() { Qon2Dom.domReady(); });
  } else {
      throw "Qon2Dom needs to be loaded after jQuery"
  }
#+end_src 

** TODO Add the ability to add our own post-dom handlers so you can **live gloriously**  without jQuery
** TODO Look at how these could be combined into larger components

* Hacking Qute 

** TODO namespace!

** Base Object: Qute
*** TODO split this out using noweb
*** TODO when Function.bind is not available, it should work better. 
**** bind definition from underscore.

	 I've un-shitified the code.  This is for illustrative purposes; we're not saving bytes, so lets format it good.

	      Underscore.js 1.4.4
          http://underscorejs.org/
          (c) 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.
          Underscore may be freely distributed under the MIT license.

***** Documentation:
	  bind_.bind(function, object, [*arguments]) 
	  
	  Bind a function to an object, meaning that whenever the function is called, the value of this will be the object. Optionally, pass arguments to the function to pre-fill them, also known as partial application.

	  #+begin_src js :tangle no
        var func = function(greeting) { 
            return greeting + ': ' + this.name 
        };
        func = _.bind(func, {name : 'moe'}, 'hi');
        func();   // => 'hi: moe'
	  #+end_src

**** Code
#+begin_src js :tangle no
  
  var FuncProto  = Function.prototype;
  var nativeBind = FuncProto.bind;
  
  // Reusable constructor function for prototype setting.
  var ctor = function(){};
  
  _.bind = function(func, context) {
      var args, bound;
      if (func.bind === nativeBind && nativeBind) {
          return nativeBind.apply(func, slice.call(arguments, 1));
      }
          
      if (!_.isFunction(func)) {
          throw new TypeError;
      }
      
      args = slice.call(arguments, 2);
      
      return bound = function() {
          if (!(this instanceof bound)) {
              return func.apply(context, args.concat(slice.call(arguments)));
          }
  
          ctor.prototype = func.prototype;
          var self = new ctor;
          ctor.prototype = null;
  
          var result = func.apply(self, args.concat(slice.call(arguments)));
          if (Object(result) === result) {
              return result;
          }
          return self;
      };
  };
#+end_src
*** TODO extend should take an optional init function, rebind this, and execute it on completion.
	Note, because of a decision to allow multiple extend objects, getting the interface right for this will be important!

**** double underscore __construct  ocnstructors?
	 - problem :: very php... is double underscore reserved in js?
**** base it on type
	 - problem :: not very slick.  What happens when you pass in a Function object that you just wand to ad to the extensions?

#+begin_src js :tangle qute.js
  Qute = {
      beget: function() {
          function F() {};     
          F.prototype = this;  
          var o = new F();  // valid use of the new keyword here      
          return o;
      },
      extend: function() {  
          var o = this.beget();
          
          for (var i = arguments.length - 1; i >= 0; i--) {
              var from = arguments[i];
              for (var prop in from) { 
                  o[prop] = from[prop];
              }
          }
          return o; 
      },
      rebind: function(method) {
          if (typeof method == "string") {
              if (typeof this[method] == "function") {
                  method = this[method];
              } else {
                  throw new TypeError("Cannot rebind "+method+".  It is not a function or not a field of hte current object.");
              }
          }
  
          if (typeof method["bind"] == "function") {
              return method.bind(this);
          } else {
              var self = this;
              return function() {
                  var args = Array.prototype.slice.call(arguments);
                  return method.apply(self, arguments);
              }
          }
      },
      quacksLike: function(duck) {
          var quacks = true;
          for (k in duck) {
              if (typeof this[k] == "undefined") {
                  quacks = false;
              }
          }
          return quacks;
      },
      quacksJustLike: function(duck) {
          var quacks = true;
          for (k in duck) {
              if ((typeof this[k] == "undefined") ||
                  (typeof this[k] == duck[k])){
                  quacks = false;
              }
          }
          return quacks;
  
      }
  };
#+end_src

*** TODO borrow ... figure out syntax

*** TODO proper testing


* Footnotes

[fn:1] http://javascript.crockford.com/prototypal.html
 
